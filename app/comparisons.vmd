---
title: Comparing Vale, Javascript, C++, and Rust
author: Evan Ovadia
date: Jan 1, 2021
realm: blog
path: blog/comparisons
layout: annotated
namespace: c-blog m-annotated
---


Vale was created to be the first *fast*, *safe*, and *easy* programming language.

<<<<

Generally, languages today have one or two, but not all three.

This article will dive into the details and compare these languages' designs!

////
<div class="comparison">
  <table width="100%">
    <thead>
      <th></th>
      <th>Easy</th>
      <th>Safe</th>
      <th>Fast</th>
    </thead>
    <tbody>
      <tr>
        <th>C++</th>
        <td class="bad">No</td>
        <td class="bad">No</td>
        <td class="good">Yes</td>
      </tr>
      <tr>
        <th>Javascript</th>
        <td class="good">Yes</td>
        <td class="good">Yes</td>
        <td class="bad">No</td>
      </tr>
      <tr>
        <th>Rust</th>
        <td class="bad">No</td>
        <td class="na">Mostly</td>
        <td class="good">Yes</td>
      </tr>
      <tr>
        <th>Vale</th>
        <td class="good">Yes</td>
        <td class="good">Yes</td>
        <td class="good">Yes</td>
      </tr>
    </tbody>
  </table>
</div>
>>>>


This article is meant to explain our vision for Vale, so will reference a lot of the final designs. *We'll make it clear when we're talking about the current implementation versus what we have planned.*

We hope to have all of these completed and benchmarked by late 2023. We're grateful for your interest and support as we create all this!


<slice/>


# Comparing with Love

We picked these three languages because they're our favorites in some way:

 * C++ has the feeling of raw power and freedom!
 * Javascript is like a soft autumn breeze, easy and refreshing. [# (I hope this isn't quoted on PCJ!)]
 * Programming in Rust feels like an addictive puzzle game! [# It's fun to push the borrow checker's boundaries, especially when traits and closures are involved!]

This post is not meant to criticize, just an honest comparison. Also note that these are only opinions, and not objective truths!

<slice/>


# Easy

Vale aims to be safe and fast _while also remaining easy_.

To get a sense of what easy means:

 * Javascript is very easy. It only takes a few days to learn enough to make a medium-sized program in Javascript. It recently became even easier with the `class` keyword, to avoid the (usually) unintuitive prototypal inheritance.
 * C++ is very difficult. If one sticks to the more modern features and avoids multiple inheritance, it might only take a few months to become comfortable enough with C++ to be able to write a medium-sized program. However, to write a _safe_ program in C++ is nearly impossible. One can get very close, with good use of smart pointers, valgrind, asan, etc, but it's still difficult to avoid undefined behavior.
 * Rust is also very difficult. It's as complex as C++, and throws it all at the programmer at once. Unless you're brilliant (or come from certain backgrounds which fit well with Rust's restrictions), it's going to take you many months to learn what patterns the borrow checker likes, what kinds of tricks to use to work around it, and when to give up and re-architect your program. Eventually, you internalize these things, at which point it has "clicked".


Vale is 100% safe, which removes most of C++'s difficulties.

Vale's "region borrow checker" doesn't impose the mutability-xor-aliasability restriction on every object, which is the source of Rust's difficulties.


Vale also has some innovations to make parallelism and concurrency easier:

 * Its planned "deterministic replayability" would help us reproduce race conditions and other bugs. Heisenbugs could be a thing of the past!
 * Its planned [Seamless, Fearless, and Structured Concurrency](https://verdagon.dev/blog/seamless-fearless-structured-concurrency) would allow us to add structured concurrency without needing to refactor any existing code or data.


Vale does make a few concessions here:

 * It's centered around single ownership ([moreso than C++ and Rust](https://verdagon.dev/blog/raii-next-steps)), in a way that isn't complicated by the orthogonal complexity burdens of C++ (difficult syntax and compiler errors) or Rust (the borrow checker).
 * Vale is statically typed, which isn't as easy as a dynamically typed language like Javascript (in the short term, at least).
 * Vale would have more advanced features, such as allocators and the region borrow checker. However, you can write entire programs without ever needing to know these, they're just for optimization. [# This principle is called "gradual complexity." Other languages that do this well are C#, Swift, and Go.]

In the end, Vale is almost as easy as Javascript, and much easier than Rust and C++.

<slice/>


# Safe

Vale is 100% memory-safe and data-race-safe, like Javascript, and safer than Rust and C++.

 * C++ is completely unsafe. By default, the code you write will risk a lot of memory unsafety. There are ways to mitigate it (the aforementioned smart pointers, valgrind, asan), but it takes a lot of discipline.
 * Javascript is entirely sandboxed, and never shares memory with unsafe code. [# Specifically, Javascript can use FFI into other languages with webassembly, but it doesn't share memory with them, it only sends immutable values back and forth.] You can largely trust Javascript code that someone else wrote. We do it all the time, with our browsers.
 * Rust is somewhere between. It's safe by default, except:
    * It has `unsafe` code which allow unsafe operations.
    * It allows bugs in `unsafe` code (and FFI [# This stands for Foreign Function Interface, and refers to how Rust can call into C code.]) to trigger memory unsafety in safe Rust code.
    * A Rust program will bring a lot of `unsafe` code in via dependencies.

Vale plans to have a [memory-safe unsafe block](https://vale.dev/guide/unsafe#the-unsafe-block), as odd as that sounds; it will use the region borrow checker to keep the safe region's data separate from the unsafe region's data, and allowing safe communication between them.

Vale's "check override" operator `!!` is disabled by default, and can be enabled on a per-module basis.

<slice/>


# Fast

! Note: Generational References are complete and stable, but the rest of this section is talking about Vale's final design. We hope to have all of these completed and benchmarked by mid-2023. We're grateful for your interest and support as we create all this!

Vale aims to be as fast as Rust and C++, and much faster than Javascript.

 * Javascript uses dynamic typing and garbage collection, which both cause some overhead.
 * Rust is very fast. The borrow checker indirectly incurs only a little run-time overhead. [# The borrow checker influences our programs to put more objects into centralized `Vec`s and `HashMap`s, which incur more bounds checking and hashing costs than other languages would in the same situation.]
 * C++ is the fastest. It lets you do anything you want, with zero overhead.

We think we've found a way to get Rust and C++'s speed, while still remaining easy.

Basically, we start with [Generational References](https://verdagon.dev/blog/generational-references), and then remove the vast majority of the generation checks by using:

 * *Object permissions* such as `iso` and `uni` to inform the type system that these objects have no aliases, to skip all generation checks for those objects.
 * [Hybrid-Generational Memory](https://verdagon.dev/blog/hybrid-generational-memory), which combines multiple generation checks into one ahead of time.
 * The [Region Borrow Checker](https://verdagon.dev/blog/zero-cost-refs-regions) to temporarily turn any pre-existing data immutable, to skip generation checks when accessing them.

By our estimation, a surprisingly high percentage of functions drop to zero memory-safety overhead when we use these three techniques together [as in this snippet](https://verdagon.dev/blog/yak-shave-language-engine-game#the-good-parts), and we estimate the remaining generation checks are only about as common as the extra bounds checking that Rust does compared to other languages.

Vale also aims to enable memory-safe allocators and make them easy to use. It's quite possible that the average Vale program might be faster than the average C++ program.


# Intended Use Cases

Vale, C++, Rust, and JS have different strengths which makes them excel in different use cases.

Compared to Vale:

 * *Javascript* is very simple: dynamically typed and garbage collected. This could make it better than Vale for scripting and prototyping.
 * *Rust* imposes a lot of extra complexity on the programmer, but makes memory handling more explicit. This is better for things like embedded development or other overly-memory-constrained environments.
 * *C++*'s strength is in the absolute freedom it gives the programmer and its access to low-level memory tricks, which is vital in e.g. AAA games.

Vale's combination of speed, safety, and ease are universally useful, but it will particularly shine for:

 * Servers, because its 100% safety helps handle the untrusted input from the user, and its [Seamless, Fearless, and Structured Concurrency](https://verdagon.dev/blog/seamless-fearless-structured-concurrency) makes concurrency easier than ever before.
 * Games, because it's extremely fast, with memory safety to prevent odd bugs, while still being easy and flexible enough to allow quick iterating and innovating.
 * Web/Android/iOS apps, because Vale's [Higher RAII](https://verdagon.dev/blog/higher-raii-7drl) is an invaluable tool for complex systems with a lot of state.


We hope you enjoyed this article, and as always, feel free to leave any comments in the [r/vale](http://reddit.com/r/vale) subreddit or swing by our [discord server](https://discord.gg/SNB8yGH)!


If you're as excited about Vale as we are, please consider sponsoring us!


<center>
  <a href="https://github.com/sponsors/ValeLang" class="donate-button">
     <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-heart icon-sponsor mr-1 color-fg-sponsors">
        <path fill-rule="evenodd" d="M4.25 2.5c-1.336 0-2.75 1.164-2.75 3 0 2.15 1.58 4.144 3.365 5.682A20.565 20.565 0 008 13.393a20.561 20.561 0 003.135-2.211C12.92 9.644 14.5 7.65 14.5 5.5c0-1.836-1.414-3-2.75-3-1.373 0-2.609.986-3.029 2.456a.75.75 0 01-1.442 0C6.859 3.486 5.623 2.5 4.25 2.5zM8 14.25l-.345.666-.002-.001-.006-.003-.018-.01a7.643 7.643 0 01-.31-.17 22.075 22.075 0 01-3.434-2.414C2.045 10.731 0 8.35 0 5.5 0 2.836 2.086 1 4.25 1 5.797 1 7.153 1.802 8 3.02 8.847 1.802 10.203 1 11.75 1 13.914 1 16 2.836 16 5.5c0 2.85-2.045 5.231-3.885 6.818a22.08 22.08 0 01-3.744 2.584l-.018.01-.006.003h-.002L8 14.25zm0 0l.345.666a.752.752 0 01-.69 0L8 14.25z"></path>
     </svg>
     Sponsor us on GitHub!
  </a>
</center>




<slice new-color="afterword"/>


# About the Vale Language Project

The Vale Language Project is not just about making Vale, it's also about *exploring, discovering, and publishing* new programming language mechanisms that enable *speed*, *safety*, and *ease of use.*


*The world needs more exploration here!* Currently, most programming language research is is in:

 * High-overhead languages involving reference counting and tracing garbage collection.
 * Complex languages (Ada/Spark, Coq, Rust, Haskell, etc.) which impose a higher complexity burden on the average programmer.

These are useful, but there is a *vast field of possibilities* in between, waiting to be explored!


Our aim is to explore that space, discover what it has to offer, and make *speed and safety easier than ever before.*


In this quest, we've discovered a lot of new techniques:

 * [Region Borrow Checking](/blog/zero-cost-refs-regions), which adds mutable aliasing support to a Rust-like borrow checker.
 * [Generational Memory](/blog/generational-references), for a language to ensure an object still exists at the time of dereferencing.
 * [Hybrid-Generational Memory](/blog/hybrid-generational-memory), which ensures that nobody destroys an object too early, for better optimizations.


These techniques have also opened up some new emergent possibilities:

 * [Seamless concurrency](https://verdagon.dev/blog/seamless-fearless-structured-concurrency), the ability to launch multiple threads that can access any pre-existing data without data races, without the need for refactoring the code or the data.
 * Object pools and bump-allocators that are memory-safe and decoupled, so no refactoring needed.
 * [Fearless FFI](/blog/fearless#safe-externs), which allows us to call into C without risk of accidentally corrupting Vale objects.
 * Deterministic replayability, to record all inputs and replay execution. Goodbye races and heisenbugs!
 * [Higher RAII](/blog/raii-next-steps), a form of linear typing that enables destructors with parameters and returns.


We also gain a lot of inspiration from other languages, and are finding new ways to combine their techniques:

 * We can mix an `unsafe` block with Fearless FFI to make a much safer systems programming language!
 * We can mix Erlang's isolation benefits with functional reactive programming to make much more resilient programs!
 * We can mix region borrow checking with Pony's `iso` to support shared mutability.

...plus a lot more interesting ideas to explore!


The Vale programming language is only one combination of the features we've found. Our goal is to publish all the techniques we've found, even the ones that couldn't fit in Vale, so that other languages can make strides in this area.


Our medium-term goals:

 * Publish the Language Simplicity Manifesto, a collection of principles to keep programming languages' learning curves down.
 * Publish the Memory Safety Grimoire, a collection of "memory safety building blocks" that languages can potentially use to make new memory models, just like Vale combined generational references and scope tethering.
 * Prototype the Region Borrow Checker in Vale, to show the world that shared mutability can work with borrow checking!
 * Prototype Hybrid-Generational Memory in Vale, to see how fast and easy we can make single ownership.


We aim to publish articles biweekly on all of these topics, and inspire the next generation of fast, safe, and easy programming languages.


If you want to support our work, please consider [sponsoring us on GitHub](https://github.com/sponsors/ValeLang)!

With enough sponsorship, we can:

 * Work on this full-time.
 * Turn the Vale Language Project into a 501(c)(3) non-profit organization.
 * Make Vale into a production-ready language, and push it into the mainstream!

<center>
  <a href="https://github.com/sponsors/ValeLang" class="donate-button">
     <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-heart icon-sponsor mr-1 color-fg-sponsors">
        <path fill-rule="evenodd" d="M4.25 2.5c-1.336 0-2.75 1.164-2.75 3 0 2.15 1.58 4.144 3.365 5.682A20.565 20.565 0 008 13.393a20.561 20.561 0 003.135-2.211C12.92 9.644 14.5 7.65 14.5 5.5c0-1.836-1.414-3-2.75-3-1.373 0-2.609.986-3.029 2.456a.75.75 0 01-1.442 0C6.859 3.486 5.623 2.5 4.25 2.5zM8 14.25l-.345.666-.002-.001-.006-.003-.018-.01a7.643 7.643 0 01-.31-.17 22.075 22.075 0 01-3.434-2.414C2.045 10.731 0 8.35 0 5.5 0 2.836 2.086 1 4.25 1 5.797 1 7.153 1.802 8 3.02 8.847 1.802 10.203 1 11.75 1 13.914 1 16 2.836 16 5.5c0 2.85-2.045 5.231-3.885 6.818a22.08 22.08 0 01-3.744 2.584l-.018.01-.006.003h-.002L8 14.25zm0 0l.345.666a.752.752 0 01-.69 0L8 14.25z"></path>
     </svg>
     Sponsor us on GitHub!
  </a>
</center>
