---
title: Type Stability
subtitle: Vale's Vision: Memory Safety, Part 2
realm: vision
path: vision/safety-2-type-stability
layout: annotated
namespace: c-blog m-annotated
---


Welcome to the [Vale's Vision](/vision/vision) series, where we describe where Vale is going and how we plan to get there!

For those unfamiliar, *Vale* is a programming language that combines new memory management techniques in order to be easy to learn, memory safe, deterministic, and fast.


One of those new memory management techniques is *type stability,* where an object's memory is only ever reused for the same type.



# Type-Stable Regions

As explained in the [previous page](/vision/safety-1-generational-references), Vale can use generational references for memory safety: whenever we free an object, we increment its generation, ensuring that dereferencing any remaining references to it will fail an assertion.


However, with the region borrow checker, we can designate that a certain call should use only type-stable allocators for anything it allocates, rather than relying on generation checks for memory safety.


<<<<
Here, `main` is calling `findPath` in a way which makes `findPath` completely type-stable.


Specifically, it's instructing `findPath` to use the (type-stable) `'pool` [#pool] allocator.


`findPath` knows about two regions:

 * `'r`, the region of all the parameters.
 * `'b`, which it uses for allocations, because it's in the `'b {` position.


Vale recognizes that the `'pool` allocator is a type-stable one, so will compile `findPath` so that it skips generation checks for anything in `'b`.
////
```vale
exported func main() {
  game = makeGame(...);
  // Call findPath, make it
  // use a pool.
  path =
    'pool findPath(
      &game,
      Location(1, 2),
      Location(8, 9));
  println(path);
}

func findPath<'b, 'r>( «annotations»
  game 'r &Game,
  from 'r Location,
  to 'r Location)
List<Location> 'b {
  explored = Set<Location>();
  // ...
}
```: notest
>>>>


Note how `findPath` doesn't mention `'pool` at all. `findPath` is completely decoupled from the allocator it will be using.


<slice>
#pool: Vale's `pool` allocator is similar to the `malloc` + free-list approach, except it pulls from a [slab](https://en.wikipedia.org/wiki/Slab_allocation) instead.

This is much faster than `malloc`, and when the region goes out of scope, we can just blast away the entire slab instead of calling `free` for each object.


#annotations: These `'r` and `'b` annotations are shown here for clarity, but the `pure` keyword can actually infer every one of these.
</slice>


# Pure Functions

In the above `findPath` example, it will skip generation checks on any new objects because it knows that it's using type-stable allocators.


However, it also skips generation checks on a lot of pre-existing objects too, with the `pure` keyword.


<<<<
Here, we're adding `pure` to `findPath`, which causes two things to happen:

 * Vale prevents us from modifying anything in region `'r`.
 * Vale knows that `'r` is immutable, and therefore type-stable.

////
```vale
pure func findPath<'b, 'r>(
  game 'r &Game,
  from 'r Location,
  to 'r Location)
List<Location> 'b {
  explored = Set<Location>();
  // ...
}
```: notest
>>>>


This knowledge helps the compiler eliminate a _lot_ of generation checks. [# It eliminates every generation check, except when load a non-owning reference field from an immutable non-unique struct. In that rare case, the compiler might perform a generation check.]

<slice/>


# Hybrid-Generational Memory

Vale uses something called [hybrid-generational memory](/vision/speed-6-hybrid-generational-memory), which is a blend of generational references and type stability.


Hybrid-generational memory adds a technique called *scope tethering*, where every object has a bit which instructs the allocator to not reuse this allocation (or any indirectly finally-owned allocations) for another type, until after the scope tether bit is cleared again.


With this knowledge, Vale can effectively "borrow" the allocation (and its entire indirectly finally-owned hierarchy!) for zero cost access.


This is similar to how Rust programs do a bounds check to "dereference" an index to temporarily borrow something from a `Vec`. In that sense, generational references and type stability have enabled an automatic Rust, so to speak!


You can read more about this at [Hybrid-Generational Memory](/vision/speed-6-hybrid-generational-memory).

<slice/>


# Vale Addresses the Drawbacks

The above `malloc` + free-list approach has some drawbacks, which Vale addresses.


## Allocators

We've been talking in terms of `malloc`, which can be pretty slow.

However, Vale lets use use type stability with any allocator we'd like. Read more at [Allocators](/vision/speed-3-allocators)!

<slice/>


## Memory Usage

This approach restricts when we can reuse memory, which means memory will be reused less often.


This is similar to C++ and Rust programs where we have `vector`s (or `Vec`s) which keep growing and never shrink.


However, this works well for us, because we opt-in to type-stability on a per-region basis, usually for the scope of a function call.

So, we recommend using type stability for most function calls, unless they don't return immediately.


One can also benefit from manually making a type-stable region, if it contains a lot of allocations and few types.

<slice/>


## Unions

In C and C++, a *union* is a chunk of memory whose type can change at run-time.


<<<<
For example, this union `MyUnion` can contain either a `Spaceship` or a `Satellite`.


In this `main`, our `MyUnion` starts out with a `Satellite`.


Then, we change it to hold a `Spaceship`.


Unions are similar to interfaces, in that their actual "contained" type is not known until run-time.
////
```c++
struct Spaceship {
  int fuel;
  // ...
};
struct Satellite {
  string name;
  // ...
};
union MyUnion {
  Spaceship ship;
  Satellite sat;
};
void main() {
  MyUnion u;
  u.sat = Satellite("Zed");

  // Now has a Spaceship
  u.ship = Spaceship(1337);
}
```
>>>>


Unions are fundamentally *not type-stable*, and could cause memory unsafety in our simple `malloc` + free-list approach.


<<<<
In this code, we are dereferencing a `Satellite*` that points to memory that is no longer a `Spaceship`.


This might have caused a segmentation fault in the simple `malloc` + free-list approach, because the code expects a string (the `name` in `Satellite`) but that memory has already been overwritten by an int (the `fuel` in `Spaceship`).
////
```
void main() {
  MyUnion u;
  u.sat = Satellite("Zed");
  Satellite* ptr = &u.sat;

  // Now has a Spaceship
  u.ship = Spaceship(1337);

  cout << ptr->name << endl;
}
```
>>>>


There is a solution though! With Vale's `uni`que keyword, unions become memory safe.


We would say `u uni MyUnion = Satellite("Zed");`. [# We probably wouldn't call it MyUnion in Vale: unions and interfaces are the same thing, except unions are inline and interfaces are on the heap.]


When we have a unique reference to an object, [# We say unique "reference" here, but the object still lives inside the containing object. In a way, the reference is zero bytes wide and points right after itself.] it's usually the _only_ reference to the object, except:

 * It's safe to _temporarily_ mutably alias a `uni` field of a `uni` object.
 * We can use a pure function to make it immutable, so we can copy and alias it.
 * If the compiler sees that we haven't modified anything yet, it will let us hold an alias to the object.
 * We can always copy the object!


Read more at [Unique Unions](/vision/unique-unions)!

<slice/>


## Stack allocations

A normal C program reuses memory on the stack for different types all the time.


<<<<
Here, we're calling `funcA`, which uses some space on the stack to hold its `int i`.


Once `funcA` exits, `funcB` can reuse that same space on the stack.


It's very likely that `funcB`'s' `string s` will be in the same memory that `funcA`'s `int i` was in.


This is unfortunate, because it violates type stability: we're accidentally reusing an `int`'s memory for a `string`.
////
```c++
void funcA() {
  int i = 5;
  cout << i << endl;
}
void funcB() {
  string s = "hello";
  cout << s << endl;
}
void main() {
  funcA();
  funcB();
}
```
>>>>


`uni`que references are a solution for this, in the same ways they helped unions! You can read more at [Unique Unions](/vision/unique-unions).


The compiler can also mitigate this with *shape stability*, which is more relaxed than type stability, and pretends that any two non-pointers are the same type.

With shape stability, we can put anything on the stack, as long as it (recursively) only contains primitives, inline structs, and optionals. [# Optionals are a special case, they're the only union that's type-stable.]


If that is not the case, and the object is not `uni`que (or automatically determined to be `uni`que) then Vale will put the object on the heap. [# Luckily, the heap is quite fast, because we have those free-lists handy!]

<slice/>


# Summary

Vale uses type stability to eliminate a lot of memory management overhead, in a way that's flexible and decoupled from our actual logic.

Type stability usually has some drawbacks, but Vale addresses them with its other features, such as unique references, region borrow checker, pure functions, and shape stability.

Additionally, Vale combines type stability and generational references to make hybrid-generational memory, which automatically borrows entire hierarchies of objects for temporary zero-cost access.


This is a core part of Vale's vision, and we're looking forward to exploring these new techniques and bringing them to programmers worldwide!

<slice new-color="afterword"/>


# Draft Notes

add:

 * next and prev links at top and bottom
 * memory safe is a spectrum:
    * instance safe <---> type safe <---> shape safe <---> unsafe
    * GC and RC are nice because theyre instance safe
       * but not immune, i was working on a certain company's 14th chat app, and we had some user switching privacy problems
    * rust and type-stability are only type safe
 * type-safe is faster, and great for things like:
    * games
    * image processing
    * apps without account switching
 * you should not use raw vecs or type stability in stateful code where you handle multiple users
    * like servers, or multi-account apps
    * if youre using rust, use generational_arena or RC please
