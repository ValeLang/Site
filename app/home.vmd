---
path: 
layout: onecolumn
namespace: home
realm: home
path: home
---


# Vale is the fast, fearless, and flexible programming language.


<<<<


Vale's goal is to show the world that speed and safety can be easy. Vale is:

 * *Fast:* Vale is an AOT compiled language that uses an entirely new approach to memory management: [generational references](https://verdagon.dev/blog/generational-references), which have zero aliasing costs and no garbage collection pauses.
 * *Fearless:* It is the [safest native language](/fearless): zero `unsafe`, region isolation, extern boundaries, and dependency extern whitelisting.
 * *Flexible:* Its new take on [regions](/guide/regions) enables alternate memory management and allocation strategies, with the [region borrow checker](https://verdagon.dev/blog/zero-cost-refs-regions) enabling seamless, fast, and _easy_ interop between them.


Read comparisons with [C++, Javascript, and Rust](/comparisons)!


*Featuring*:

 * [Statically Typed](/guide/introduction) with type inference.
 * [Ownership](/guide/references), move semantics, and deterministic destruction.
 * [Memory Safe](/guide/references#nonowning), using constraint and weak references.
 * [Regions](/guide/regions) for different allocation strategies.
 * [Inline References](/guide/references#inline) for optimization.
 * [Generics](/guide/generics), including virtual generics.
 * [Interface Constructors](/guide/interfaces#sealedconstructors)
 * [Universal Function Call Syntax](/guide/introduction#functions)
 * [Mutable and Immutable Objects](/guide/structs#mutability)
 * [Patterns](/guide/patterns): Destructuring, Parameters, Extractors


////

*Recent posts:*

 * [Data Races in Python, Despite the Global Interpreter Lock](https://verdagon.dev/blog/python-data-races)
 * [Seamless, Fearless, Structured Concurrency](https://verdagon.dev/blog/seamless-fearless-structured-concurrency)
 * [Generational References](https://verdagon.dev/blog/generational-references)
 * [Hybrid-Generational Memory](https://verdagon.dev/blog/hybrid-generational-memory)
 * [Zero Cost References with Regions](https://verdagon.dev/blog/zero-cost-refs-regions)
 * [Next Steps for Single Ownership and RAII](https://verdagon.dev/blog/raii-next-steps)
 * [Announcing Vale!](https://www.reddit.com/r/ProgrammingLanguages/comments/hplj2i/vale/)



```vale
exported func main() {
  println("Hello world!");
}
```stdout
Hello world!
```: `import stdlib.*;`


```vale
exported func main() {
  planets = [#]["Venus", "Earth", "Mars"];
  foreach planet in planets {
    println("Hello " + planet + "!");
  }
}
```stdout
Hello Venus!
Hello Earth!
Hello Mars!
```: `import stdlib.*;`



Vale is at version 0.1, see the [Roadmap](/roadmap) for what's next!


<a href="https://github.com/sponsors/ValeLang" class="sponsor">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-heart icon-sponsor mr-1 color-fg-sponsors">
    <path fill-rule="evenodd" d="M4.25 2.5c-1.336 0-2.75 1.164-2.75 3 0 2.15 1.58 4.144 3.365 5.682A20.565 20.565 0 008 13.393a20.561 20.561 0 003.135-2.211C12.92 9.644 14.5 7.65 14.5 5.5c0-1.836-1.414-3-2.75-3-1.373 0-2.609.986-3.029 2.456a.75.75 0 01-1.442 0C6.859 3.486 5.623 2.5 4.25 2.5zM8 14.25l-.345.666-.002-.001-.006-.003-.018-.01a7.643 7.643 0 01-.31-.17 22.075 22.075 0 01-3.434-2.414C2.045 10.731 0 8.35 0 5.5 0 2.836 2.086 1 4.25 1 5.797 1 7.153 1.802 8 3.02 8.847 1.802 10.203 1 11.75 1 13.914 1 16 2.836 16 5.5c0 2.85-2.045 5.231-3.885 6.818a22.08 22.08 0 01-3.744 2.584l-.018.01-.006.003h-.002L8 14.25zm0 0l.345.666a.752.752 0 01-.69 0L8 14.25z"></path>
  </svg>
  Sponsor us on GitHub!
</a>


Vale is [open for contributions](/contribute), thank you to our team of [contributors](/contributors)!


>>>>

