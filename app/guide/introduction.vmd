---
title: Introduction
path: guide/introduction
layout: annotated
namespace: m-annotated
series-name: Vale Language Guide
series-entry: []()
series-entry: [Collections](/guide/collections)
series-entry: [Functions](/guide/functions)
series-entry: [Modules](/guide/modules)
series-entry: [Structs](/guide/structs)
series-entry: [References](/guide/references)
series-entry: [Interfaces](/guide/interfaces)
series-entry: [Generics](/guide/generics)
series-entry: [Patterns](/guide/patterns)
series-entry: [Regions](/guide/regions)
series-entry: [Externs and Exports](/guide/externs)
series-entry: [Unsafe](/guide/unsafe)
---

Welcome to Vale! Vale is a fast, safe, and simple programming language. This introduction will show how to write a program in Vale.

This reference assumes that you are familiar with basic programming concepts, and at least one other imperative language (like C, Java, Python, etc).

Vale is still in alpha, which means it's a preview; you can write programs in it, but some of the features that make it easy aren't yet available.


# Hello world!

<<<<
First, download the latest Vale compiler from the [downloads page](/download), and unzip it to a directory, such as `~/Vale`.

Then:

 * Put this code into a .vale file such as `~/myprogram.vale`
 * Run the command `~/Vale/valec build mymodule=~/myprogram.vale --output_dir=build`.
    * See that it created a `build` directory, with a `main` executable in it. [# If on windows, the executable will be named `main.exe`.]
 * Run the command `build/main` to run the executable.

////
```vale
exported func main() {
  println("Hello world!");
}
```stdout
Hello world!
```: `import stdlib.*;`
>>>>


Instead of:

`~/Vale/valec build mymodule=~/myprogram.vale --output_dir=build`

You can say:

`valec build mymodule=~/myprogram.vale --output_dir=build`

if you put ~/Vale in your PATH. [#path] We recommend it!


Every Vale program must have an `exported` main function like the above. [# `exported` means it can be called by the OS or other languages such as C. See [Externs and Exports](/guide/externs) for more.]


Every source file must belong to a module. That's what the `mymodule=` is for. For now, you can put `mymodule=` in front of all of your .vale files (or directories containing .vale), and in [Modules](/guide/modules) we'll explain more about what modules are.


# Variables


<<<<
We can make a variable with the `=` symbol.
////
```vale
exported func main() {
  x = "world!";
  println("Hello " + x);
}
```stdout
Hello world!
```: `import stdlib.*;`
>>>>

<<<<
We can change a variable's contents with the `set` keyword.
////
```vale
exported func main() {
  x = "world!";
  set x = "Antarctica!";
  println("Hello " + x);
}
```stdout
Hello Antarctica!
```: `import stdlib.*;`
>>>>

<slice>
#path: To add `~/Vale` to your PATH in Linux and Mac, type:

`export PATH=$PATH:~/Vale`

This will only affect the current session. However, you can make this automatically happen in every session, by adding the command to a file that run automatically on startup. On Linux and Mac, that file is usually one of:

 * ~/.bashrc
 * ~/.bash_profile
 * ~/.zshrc

</slice>


# Static Typing & Inference

Vale is a [statically typed](https://stackoverflow.com/questions/1517582/what-is-the-difference-between-statically-typed-and-dynamically-typed-languages) language, which means the type of every variable and struct member is known at compile-time.


<<<<
In this example, `a` is of type `str`. If we want, we can specify it explicitly after the variable's name.

...though we usually leave it out, because Vale uses type inference to figure out the type of `a` for us.
////
```vale
exported func main() {
  a str = "world!";
  println("Hello " + a);
}
```stdout
Hello world!
```: `import stdlib.*;`
>>>>

<slice/>



<slice new-color="afterword" />


# Planned Features

These are planned features for Vale. See the [roadmap](/roadmap) for plans!


## Variants

<<<<
We'll be able to produce a *variant*, which is something that can be one of two types (or more).

To make a variant, use an if-statement, and return a different type from the then branch than the else branch.

Here, `a` is a variant, either a string or an integer. `a`'s type is `(str|int)`.
////
```
exported func main() {
  a =
    if (true) { "hello" }
    else { 42 };
}
```
>>>>

Later, we can use the `match` statement to determine if `a` actually contains a `str` or an `int`.


## Indexing Structs or Tuples for Variants

<<<<
We'll be able to access a arbitrary fields of tuples or structs with square brackets, like `arr[1 + 1]`, which would produce a *variant*. [#variantindexing]
////
```
exported func main() {
  arr = [5, true, "V"];
  println("Saturn " + arr[1 + 1]);
}
```stdout
Saturn V
```
>>>>

<slice new-color="default">
#variantindexing: Specifically, indexing this tuple gives a variant `(int|bool|str)`, with a `+` function that calls the appropriate actual `+` depending on the run-time type (`int` vs `bool` vs `str`).
</slice>

