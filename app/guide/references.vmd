---
title: References
path: guide/references
layout: annotated
namespace: m-annotated
series-name: Vale Language Guide
series-entry: [Introduction](/guide/introduction)
series-entry: [Collections](/guide/collections)
series-entry: [Functions](/guide/functions)
series-entry: [Modules](/guide/modules)
series-entry: [Structs](/guide/structs)
series-entry: []()
series-entry: [Interfaces](/guide/interfaces)
series-entry: [Generics](/guide/generics)
series-entry: [Patterns](/guide/patterns)
series-entry: [Regions](/guide/regions)
series-entry: [Externs and Exports](/guide/externs)
series-entry: [Unsafe](/guide/unsafe)
---

# Owning Reference

<<<<
An owning reference keeps an object alive. When a struct has no owning reference pointing to it anymore, the struct is deallocated.

Every mutable struct has exactly one owning reference pointing to it. [#ownership]
////
```vale
exported func main() {
  ship = Spaceship("Serenity", 2);
  // ship is an owning reference

  println(ship.name);

  // implicit (ship).drop()
}
```: `import stdlib.*; struct Spaceship { name str; fuel int; }`
>>>>


## References to Immutables

<<<<
Immutables, such as primitives or immutable structs, can have multiple owning references pointing to them. [#notquite]

When we say `a = b;` for an immutable struct, both a and b can still be used.

Immutables are simple to use. The rest of the page is about references to mutable structs.
////
```vale
struct Vec3 imm {
  x int;
  y int;
  z int;
}
exported func main() {
  firstRef = Vec3(3, 4, 5);
  otherRef = &firstRef;
  // Can use both freely.
  println(firstRef.x + otherRef.y);
}
```stdout
7
```: `import stdlib.*;`
>>>>


## Moving

A local can give up the owning reference. Afterwards, that local is gone, and we cannot use it. This is called a *move*.

This is used to influence when the struct is `drop`ped, to keep it alive for longer or destroy it sooner.

<<<<
In this example, the `a` local is giving up the owning reference, and we're putting it into the `b` local.
////
```vale
exported func main() {
  a = Spaceship(); «alocal»
  b = a; // Move the ship from a to b.
  // b now owns the Spaceship.
  // Can't use a now.
}
```: `struct Spaceship {}`
>>>>

<<<<
It works the same way when passing an owning reference to a function.
////
```vale
func foo(b Spaceship) {
  println(b.name);
}
exported func main() {
  a = Spaceship("Raza");
  foo(a); // Move a into foo's b
  // Can't use a now.
}
```: `import stdlib.*; struct Spaceship { name str; }`
>>>>


<slice>
#ownership: Ownership is also found in C++ (`unique_ptr`), Rust, and Cyclone.

C also has "conceptual" ownership, in that we must track ownership without the language's help, to know when to free an object.

Vale's references has the flexibility of C++'s `unique_ptr` while guaranteeing memory safety.

#notquite: These are references from the user's perspective, but under the hood, references to small immutables (including primitives and small structs) are inlined and copied around, for performance.

#alocal: Rather than thinking "`a` is an owning reference", think instead that `a` is a *local* that *currently contains* an owning reference.

On the next line, `a` is destroyed, but the owning reference that it contained still lives on (inside `b`).
</slice>


# Non-Owning References

Vale has two kinds of non-owning references:

 * The *Borrow Reference*, which asserts the target object is live when we make a borrow ref local variable (and then "tethers" the object so it's not freed).
 * The *Weak Reference*, which becomes null when we deallocate the struct it's pointing at.

These are explained in more detail below.

Note that there are no shared-ownership references [# Like C++'s `shared_ptr` or Rust's `Rc` or all references in Java and Python.] in Vale, except for immutable structs.

<slice />


## Borrow References

<<<<

To make a borrow reference, use the & symbol.

In this example, we're making a borrow reference to `ship` and giving it to the `foo` function.
////
```vale
struct Spaceship {
  name str;
  numWings int;
}
func foo(s &Spaceship) {
  println(s.name);
}
exported func main() {
  ship = Spaceship("Serenity", 2);
  foo(&ship);
}
```: `import stdlib.*;`
>>>>

<slice/>


## Weak References

<<<<
We often have a reference to a struct, and we would be fine with that struct being deallocated while we have a reference to it.

In these situations, we use *weak references*.

A weak reference will set itself to null when the object it's pointing at is destroyed.

We can make a weak reference with `&&`.

To use a weak reference, call `lock`, which will return an optional borrow reference (`?&Spaceship`). We can then check if it contains a `&*Spaceship` or is empty.

In other words, we cannot reach into a struct through a weak reference directly; we must lock it to try to make it into a borrow reference first.

In this example, we're making a `o` borrow reference from the `ship.origin` weak reference.
////
```vale
weakable struct Base {
  name str;
}
struct Spaceship {
  name str;
  origin &&Base;
}
func printShipBase(ship &Spaceship) {
  maybeOrigin = lock(ship.origin); «lock»«iflet»
  if (not maybeOrigin.isEmpty()) { «mat»
    o = maybeOrigin.get();
    println("Ship base: " + o.name);
  } else {
    println("Ship base unknown!");
  }
}
exported func main() {
  base = Base("Zion");
  ship = Spaceship("Neb", &&base);

  printShipBase(&ship);

  (base).drop(); // Destroys base.

  printShipBase(&ship);
}
```stdout
Ship base: Zion
Ship base unknown!
```: `import stdlib.*;`
>>>>

<slice new-color="afterword">
#lock: Locking a weak reference gives us a `?&Spaceship`, also known as an `Opt<&Spaceship>`. This has two possible subclasses: `None<&Spaceship>` which is empty and `Some<&Spaceship>` which contains a `&Spaceship`.

#iflet: In future versions, these three lines can be reduced to `if ((o) = lock(ship.origin)) {`.

This would specifically check if that `?&Spaceship` is the one-member subclass (`Some<&Spaceship>`) and if so, assigns its member to `o`. This is a conditional destructure, see [Pattern Matching](/guide/patterns) for more.

#mat: In future versions, we could also use a `match` (match statement) here to check whether the `?&Spaceship` contained anything.
</slice>


# Planned Features

These are planned features for Vale. See the [roadmap](/roadmap) for plans!


## Pointers vs Values ("Inlining")

*Inlining* is used for optimization.

<<<<
By default, a reference is a pointer, to something on the heap. [# Vale uses escape analysis to automatically inline every local that doesn't get moved into a global or parameter. The `^` keyword is useful to force it, when optimizing.] A reference can instead be a value on the stack ("inline"), by using the `^` keyword.

Inline objects are much faster to allocate and deallocate, but cannot be moved.
////
```vale
struct Spaceship {
  name str;
  numWings int;
}
exported func main() {
  ship = ^Spaceship("Enterprise", 4);
  println(ship.name);
}
```stdout
Enterprise
```: `import stdlib.*;`
>>>>

<<<<
`^` is most often used in structs. [# Vale can even inline interfaces if they're `sealed`, resulting in something similar to tagged unions in C, or enums in Rust. See Interfaces for more.]

When we use `^` in a struct, the member's memory is here inside the containing struct's memory.

In this example, the `Engine`'s memory is inside the `Spaceship`'s memory. This makes `Spaceship` bigger, and avoids allocation/deallocation overhead.

In a way, `^` means "It should live here, not somewhere else."
////
```vale
struct Engine {
  model str;
  fuel int;
}
struct Spaceship {
  name str;
  engine ^Engine;
}
exported func main() {
  ship = Spaceship(
      "Serenity",
      ^Engine("TCB", 10));
  println(ship.name);
}
```: `import stdlib.*;`
>>>>

<slice new-color="default"/>
